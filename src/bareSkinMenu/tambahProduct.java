package bareSkinMenu;

import config.koneksi;
import java.awt.Color;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author user
 */
public class tambahProduct extends javax.swing.JDialog {
    
    private int halamanSaatIni = 1;
    private int dataPerHalaman = 14;
    private int totalPages;
    private Connection conn;
    
    private String id_product;
    private String nama_product;
    private String stok_product;
    private String satuan;
    private String harga_beli;
    private String harga_jual;
    private String tgl_expired;
    private String kategori;
    
    public String getId_product() {
        return id_product;
    }

    public String getNama_product() {
        return nama_product;
    }

    public String getStok_product() {
        return stok_product;
    }

    public String getSatuan() {
        return satuan;
    }
    
    public String getHarga_beli() {
        return harga_beli;
    }
    
    public String getHarga_jual() {
        return harga_jual;
    }
    
    public String getTgl_expired() {
        return tgl_expired;
    }
    
    public String getKategori() {
        return kategori;
    }

    public tambahProduct(java.awt.Frame parent, boolean modal, String id, String nama, 
            String stok, String satuan, String hargaBeli, String hargaJual, 
            String tanggal, String kategori) {
        
        super(parent, modal);
        initComponents();
        setLocationRelativeTo(null);
        max13digit();
        conn = koneksi.getConnection();
        finishing();
        
        // Set data ke field dan komponen input
        this.id_product = id;
        this.nama_product = nama;
        this.stok_product = stok;
        this.satuan = satuan;
        this.harga_beli = hargaBeli;
        this.harga_jual = hargaJual;
        this.tgl_expired = tanggal;
        this.kategori = kategori;

        txtIdProduct.setText(id);
        txtNamaProduct.setText(nama);
        txtStok.setText(stok);
        cbxSatuan.setSelectedItem(satuan);
        txtHargaBeli.setText(hargaBeli);
        txtHargaJual.setText(hargaJual);
        txtTanggalExpired.setText(tanggal);
        cbxKategori.setSelectedItem(kategori);
        btnSimpan.setText("SIMPAN");

        if (!txtIdProduct.getText().trim().isEmpty()) {
            btnSimpan.setText("UBAH");
            fieldColor(txtIdProduct);
            fieldColor(txtStok);
            fieldColor(txtHargaBeli);
            cancelFieldColor(txtHargaJual);
        } 

    }

    private void cancelFieldColor(JTextField field) {
        field.setOpaque(true);
        field.setEditable(true);
        field.setBackground(new Color(255, 255, 255));
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        dateChooser1 = new com.raven.datechooser.DateChooser();
        panelView = new javax.swing.JPanel();
        databahan = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        txtIdProduct = new custom.JTextFieldRounded();
        jLabel23 = new javax.swing.JLabel();
        txtNamaProduct = new custom.JTextFieldRounded();
        jLabel25 = new javax.swing.JLabel();
        txtStok = new custom.JTextFieldRounded();
        jLabel28 = new javax.swing.JLabel();
        cbxSatuan = new javax.swing.JComboBox<>();
        jLabel31 = new javax.swing.JLabel();
        txtTanggalExpired = new custom.JTextFieldRounded();
        jLabel32 = new javax.swing.JLabel();
        cbxKategori = new javax.swing.JComboBox<>();
        jLabel24 = new javax.swing.JLabel();
        txtHargaBeli = new custom.JTextFieldRounded();
        jLabel26 = new javax.swing.JLabel();
        txtHargaJual = new custom.JTextFieldRounded();
        btnSimpan = new rojerusan.RSMaterialButtonRectangle();

        dateChooser1.setTextRefernce(txtTanggalExpired);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        panelView.setBackground(new java.awt.Color(255, 255, 255));
        panelView.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        databahan.setBackground(new java.awt.Color(75, 22, 76));
        databahan.setFont(new java.awt.Font("SansSerif", 1, 36)); // NOI18N
        databahan.setForeground(new java.awt.Color(75, 22, 76));
        databahan.setText("TAMBAH PRODUCT");
        panelView.add(databahan, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 20, -1, -1));

        jLabel22.setFont(new java.awt.Font("SansSerif", 1, 22)); // NOI18N
        jLabel22.setText("ID Product");
        panelView.add(jLabel22, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 100, -1, -1));

        txtIdProduct.setFont(new java.awt.Font("SansSerif", 0, 22)); // NOI18N
        txtIdProduct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtIdProductActionPerformed(evt);
            }
        });
        panelView.add(txtIdProduct, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 140, 190, 50));

        jLabel23.setFont(new java.awt.Font("SansSerif", 1, 22)); // NOI18N
        jLabel23.setText("Nama Product");
        panelView.add(jLabel23, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 200, -1, -1));

        txtNamaProduct.setFont(new java.awt.Font("SansSerif", 0, 22)); // NOI18N
        panelView.add(txtNamaProduct, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 240, 430, 50));

        jLabel25.setFont(new java.awt.Font("SansSerif", 1, 22)); // NOI18N
        jLabel25.setText("Stok");
        panelView.add(jLabel25, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 100, -1, -1));

        txtStok.setText("0");
        txtStok.setFont(new java.awt.Font("SansSerif", 0, 22)); // NOI18N
        panelView.add(txtStok, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 140, 60, 50));

        jLabel28.setFont(new java.awt.Font("SansSerif", 1, 22)); // NOI18N
        jLabel28.setText("Satuan");
        panelView.add(jLabel28, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 200, -1, -1));

        cbxSatuan.setFont(new java.awt.Font("SansSerif", 0, 22)); // NOI18N
        cbxSatuan.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Pilih Satuan Product", "item", "paket" }));
        cbxSatuan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxSatuanActionPerformed(evt);
            }
        });
        panelView.add(cbxSatuan, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 240, 360, 50));

        jLabel31.setFont(new java.awt.Font("SansSerif", 1, 22)); // NOI18N
        jLabel31.setText("Tanggal Expired");
        panelView.add(jLabel31, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 100, -1, -1));

        txtTanggalExpired.setFont(new java.awt.Font("SansSerif", 0, 22)); // NOI18N
        panelView.add(txtTanggalExpired, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 140, 170, -1));

        jLabel32.setFont(new java.awt.Font("SansSerif", 1, 22)); // NOI18N
        jLabel32.setText("Kategori");
        panelView.add(jLabel32, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 300, -1, -1));

        cbxKategori.setFont(new java.awt.Font("SansSerif", 0, 22)); // NOI18N
        cbxKategori.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Pilih Kategori Product", "skincare", "lipcare", "haircare", "bodycare" }));
        cbxKategori.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxKategoriActionPerformed(evt);
            }
        });
        panelView.add(cbxKategori, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 340, 430, 50));

        jLabel24.setFont(new java.awt.Font("SansSerif", 1, 22)); // NOI18N
        jLabel24.setText("Harga Beli");
        panelView.add(jLabel24, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 300, -1, -1));

        txtHargaBeli.setText("0");
        txtHargaBeli.setFont(new java.awt.Font("SansSerif", 0, 22)); // NOI18N
        panelView.add(txtHargaBeli, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 340, 140, -1));

        jLabel26.setFont(new java.awt.Font("SansSerif", 1, 22)); // NOI18N
        jLabel26.setText("Harga Jual");
        panelView.add(jLabel26, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 300, -1, -1));

        txtHargaJual.setText("0");
        txtHargaJual.setFont(new java.awt.Font("SansSerif", 0, 22)); // NOI18N
        txtHargaJual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtHargaJualActionPerformed(evt);
            }
        });
        panelView.add(txtHargaJual, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 340, 140, -1));

        btnSimpan.setBackground(new java.awt.Color(75, 22, 76));
        btnSimpan.setText("SIMPAN");
        btnSimpan.setFont(new java.awt.Font("SansSerif", 1, 20)); // NOI18N
        btnSimpan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSimpanActionPerformed(evt);
            }
        });
        panelView.add(btnSimpan, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 420, 170, 60));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelView, javax.swing.GroupLayout.PREFERRED_SIZE, 978, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelView, javax.swing.GroupLayout.DEFAULT_SIZE, 517, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnSimpanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSimpanActionPerformed
        if(btnSimpan.getText().equals("SIMPAN"))
            {
                insertData();
            }
        else if(btnSimpan.getText().equals("UBAH"))
            {
                updateData();
            }
    }//GEN-LAST:event_btnSimpanActionPerformed

    private void cbxKategoriActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxKategoriActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbxKategoriActionPerformed

    private void cbxSatuanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxSatuanActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbxSatuanActionPerformed

    private void txtIdProductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtIdProductActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtIdProductActionPerformed

    private void txtHargaJualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtHargaJualActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtHargaJualActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private rojerusan.RSMaterialButtonRectangle btnSimpan;
    private javax.swing.JComboBox<String> cbxKategori;
    private javax.swing.JComboBox<String> cbxSatuan;
    private javax.swing.JLabel databahan;
    private com.raven.datechooser.DateChooser dateChooser1;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JPanel panelView;
    private custom.JTextFieldRounded txtHargaBeli;
    private custom.JTextFieldRounded txtHargaJual;
    private custom.JTextFieldRounded txtIdProduct;
    private custom.JTextFieldRounded txtNamaProduct;
    private custom.JTextFieldRounded txtStok;
    private custom.JTextFieldRounded txtTanggalExpired;
    // End of variables declaration//GEN-END:variables

    
    private void max13digit() {
    txtIdProduct.addKeyListener(new KeyAdapter() {
        @Override
        public void keyTyped(KeyEvent e) {
            char c = e.getKeyChar();
            
            if (Character.isISOControl(c)) {
                return;
            }
            
            if (!Character.isDigit(c)) {
                e.consume();
                Toolkit.getDefaultToolkit().beep();
                JOptionPane.showMessageDialog(null, "ID hanya boleh berisi angka!");
                return;
            }
            
            if (txtIdProduct.getText().length() >= 13) {
                e.consume(); // mencegah input lebih dari 13 karakter
                Toolkit.getDefaultToolkit().beep(); // tanda peringatan
                JOptionPane.showMessageDialog(null, "ID Product tidak boleh lebih dari 13 digit.");
            }
        }
    });
}

    
    private void fieldColor(JTextField field) {
        field.setOpaque(true);
        field.setEditable(false);
        field.setBackground(new Color(219, 219, 219));
    }
    
    private void finishing() {
        fieldColor(txtStok);
        fieldColor(txtHargaBeli);
        fieldColor(txtHargaJual);
    }
    
    private void resetForm() {
        txtIdProduct.setText("");
        txtNamaProduct.setText("");
        cbxKategori.setSelectedItem("Pilih Kategori Product");
        txtTanggalExpired.setText("");
        txtStok.setText("0");
        cbxSatuan.setSelectedItem("Pilih Satuan Product");
        txtHargaBeli.setText("0");
        txtHargaJual.setText("0");
    }
    
    private void insertData() {
        String id_product = txtIdProduct.getText().trim();
        String nama_product = txtNamaProduct.getText().trim();
        String stok_product = txtStok.getText().trim();
        String satuan = cbxSatuan.getSelectedItem().toString();
        String harga_beli = txtHargaBeli.getText().trim();
        String harga_jual = txtHargaJual.getText().trim();
        String tgl_expired = txtTanggalExpired.getText().trim();
        String kategori = cbxKategori.getSelectedItem().toString();

        // Validasi input kosong atau belum dipilih
        if (id_product.isEmpty() || nama_product.isEmpty() || stok_product.isEmpty()
                || harga_beli.isEmpty() || harga_jual.isEmpty() || tgl_expired.isEmpty()
                || satuan.equals("Pilih Satuan Product")
                || kategori.equals("Pilih Kategori Product")) {
            JOptionPane.showMessageDialog(this, "Semua Kolom Harus Di-isi",
                    "Peringatan", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        String tanggalUntukDatabase;
        try {
            if (tgl_expired.matches("\\d{4}-\\d{2}-\\d{2}")) {
                tanggalUntukDatabase = tgl_expired;
            } else {
                SimpleDateFormat sdfInput = new SimpleDateFormat("dd-MM-yyyy");
                Date tanggal = sdfInput.parse(tgl_expired);

                SimpleDateFormat sdfOutput = new SimpleDateFormat("yyyy-MM-dd");
                tanggalUntukDatabase = sdfOutput.format(tanggal);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Format tanggal tidak valid. Gunakan format dd-MM-yyyy atau yyyy-MM-dd.",
                    "Error", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
            return;
        }


        try {
            String sql = "INSERT INTO product (id_product, nama_product, stok_product, satuan, "
                    + "harga_beli, harga_jual, tgl_expired, kategori) VALUES (?, ?, ?, ?, ?, ?, ?, ?)";
            try (PreparedStatement st = conn.prepareStatement(sql)) {
                st.setString(1, id_product);
                st.setString(2, nama_product);
                st.setString(3, stok_product);
                st.setString(4, satuan);
                st.setString(5, harga_beli);
                st.setString(6, harga_jual);
                st.setString(7, tanggalUntukDatabase); // Gunakan format yang benar!
                st.setString(8, kategori);

                int rowInserted = st.executeUpdate();
                if (rowInserted > 0) {
                    JOptionPane.showMessageDialog(this, "Data Berhasil Ditambahkan",
                            "Sukses", JOptionPane.INFORMATION_MESSAGE);

                    resetForm();
                    dispose();
                }
            }
        } catch (Exception e) {
            Logger.getLogger(tambahSupplier.class.getName()).log(Level.SEVERE, null, e);
            JOptionPane.showMessageDialog(this, "Gagal menambahkan data ke database.",
                    "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    
    private void updateData() {
        String id_product = txtIdProduct.getText().trim();
        String nama_product = txtNamaProduct.getText().trim();
        String stok_product = txtStok.getText().trim();
        String satuan = cbxSatuan.getSelectedItem().toString();
        String harga_beli = txtHargaBeli.getText().trim();
        String harga_jual = txtHargaJual.getText().trim();
        String tgl_expired = txtTanggalExpired.getText().trim();
        String kategori = cbxKategori.getSelectedItem().toString();

        // Validasi input kosong
        if (id_product.isEmpty() || nama_product.isEmpty() || stok_product.isEmpty()
                || harga_beli.isEmpty() || harga_jual.isEmpty() || tgl_expired.isEmpty()
                || satuan.equals("Pilih Satuan Product")
                || kategori.equals("Pilih Kategori Product")) {
            JOptionPane.showMessageDialog(this, "Semua Kolom Harus Di-isi",
                    "Peringatan", JOptionPane.WARNING_MESSAGE);
            return;
        }

        // Konversi tanggal ke format yyyy-MM-dd
        String tanggalUntukDatabase;
        try {
            SimpleDateFormat sdfInput = new SimpleDateFormat("dd-MM-yyyy");
            Date tanggal = sdfInput.parse(tgl_expired);

            SimpleDateFormat sdfOutput = new SimpleDateFormat("yyyy-MM-dd");
            tanggalUntukDatabase = sdfOutput.format(tanggal);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Format tanggal tidak valid. Gunakan format dd-MM-yyyy.",
                    "Error", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
            return;
        }

        // Proses update data ke database
        try {
            String sql = "UPDATE product SET nama_product=?, stok_product=?, satuan=?, harga_beli=?, "
                    + "harga_jual=?, tgl_expired=?, kategori=? WHERE id_product=?";
            try (PreparedStatement st = conn.prepareStatement(sql)) {
                st.setString(1, nama_product);
                st.setString(2, stok_product);
                st.setString(3, satuan);
                st.setString(4, harga_beli);
                st.setString(5, harga_jual);
                st.setString(6, tanggalUntukDatabase); // Format tanggal yang benar!
                st.setString(7, kategori);
                st.setString(8, id_product);

                int rowUpdated = st.executeUpdate();
                if (rowUpdated > 0) {
                    JOptionPane.showMessageDialog(this, "Data Berhasil Diubah",
                            "Sukses", JOptionPane.INFORMATION_MESSAGE);

                    resetForm();
                    dispose();
                }
            }
        } catch (Exception e) {
            Logger.getLogger(tambahSupplier.class.getName()).log(Level.SEVERE, null, e);
            JOptionPane.showMessageDialog(this, "Gagal mengubah data ke database.",
                    "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    
}
