/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package menu;

import java.sql.PreparedStatement;
import java.sql.Connection;
import config.koneksi;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.ResultSet;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import kasiramanah.FormLogin;
import notification.Notification;
/**
 *
 * @author user
 */
public class menuUser extends javax.swing.JPanel {

    /**
     * Creates new form menuBahan
     */
    private int halamanSaatIni = 1;
    private int dataPerHalaman = 20;
    private int totalPages;
    
    private final Connection conn;
    private FormLogin formLogin;
    
    public menuUser() {
        initComponents();
        
        conn = koneksi.getConnection();
        formLogin = new FormLogin();
        loadData();
        setTabelModel();
        paginationUser();
        
        txtIdUser.setEnabled(false);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelMain = new javax.swing.JPanel();
        panelView = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblData = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        dataUser = new javax.swing.JLabel();
        txtSearch = new custom.JTextFieldRounded();
        btnDelete = new rojerusan.RSMaterialButtonRectangle();
        btnAdd = new rojerusan.RSMaterialButtonRectangle();
        btnCancel = new rojerusan.RSMaterialButtonRectangle();
        btn_first = new javax.swing.JButton();
        btn_last = new javax.swing.JButton();
        btn_before = new javax.swing.JButton();
        cbx_data = new javax.swing.JComboBox<>();
        btn_next = new javax.swing.JButton();
        lb_halaman = new javax.swing.JLabel();
        panelAdd = new javax.swing.JPanel();
        menuUser = new javax.swing.JLabel();
        idUser = new javax.swing.JLabel();
        nama = new javax.swing.JLabel();
        username = new javax.swing.JLabel();
        level = new javax.swing.JLabel();
        txtIdUser = new custom.JTextFieldRounded();
        txtNama = new custom.JTextFieldRounded();
        txtUsername = new custom.JTextFieldRounded();
        btnSave = new rojerusan.RSMaterialButtonRectangle();
        batal2 = new rojerusan.RSMaterialButtonRectangle();
        cbxLevel = new javax.swing.JComboBox<>();
        password = new javax.swing.JLabel();
        txtPassword = new JPasswordField.Custom_JPasswordFieldRounded();

        setLayout(new java.awt.CardLayout());

        panelMain.setLayout(new java.awt.CardLayout());

        panelView.setBackground(new java.awt.Color(255, 255, 255));

        tblData.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        tblData.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "ID User", "Nama", "Username", "Level"
            }
        ));
        tblData.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblDataMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblData);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/search.png"))); // NOI18N

        dataUser.setFont(new java.awt.Font("SansSerif", 1, 24)); // NOI18N
        dataUser.setForeground(new java.awt.Color(102, 102, 102));
        dataUser.setText("Menu User");

        txtSearch.setForeground(new java.awt.Color(102, 102, 102));
        txtSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtSearchKeyTyped(evt);
            }
        });

        btnDelete.setBackground(new java.awt.Color(255, 0, 0));
        btnDelete.setText("HAPUS");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnAdd.setText("TAMBAH");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnCancel.setBackground(new java.awt.Color(255, 102, 0));
        btnCancel.setText("BATAL");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        btn_first.setText("First Page");

        btn_last.setText("Last Page");
        btn_last.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_lastActionPerformed(evt);
            }
        });

        btn_before.setText("<");

        cbx_data.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "20", "25", "30" }));

        btn_next.setText(">");

        lb_halaman.setText("Halaman Of Total Halaman");

        javax.swing.GroupLayout panelViewLayout = new javax.swing.GroupLayout(panelView);
        panelView.setLayout(panelViewLayout);
        panelViewLayout.setHorizontalGroup(
            panelViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelViewLayout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32))
            .addGroup(panelViewLayout.createSequentialGroup()
                .addGroup(panelViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelViewLayout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(dataUser))
                    .addGroup(panelViewLayout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1240, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelViewLayout.createSequentialGroup()
                        .addGap(610, 610, 610)
                        .addComponent(lb_halaman))
                    .addGroup(panelViewLayout.createSequentialGroup()
                        .addGap(530, 530, 530)
                        .addComponent(btn_first)
                        .addGap(9, 9, 9)
                        .addComponent(btn_before)
                        .addGap(8, 8, 8)
                        .addComponent(cbx_data, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(2, 2, 2)
                        .addComponent(btn_next)
                        .addGap(8, 8, 8)
                        .addComponent(btn_last)))
                .addGap(0, 30, Short.MAX_VALUE))
        );
        panelViewLayout.setVerticalGroup(
            panelViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelViewLayout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(dataUser)
                .addGap(18, 18, 18)
                .addGroup(panelViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(panelViewLayout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(panelViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1)
                            .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(33, 33, 33)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 418, Short.MAX_VALUE)
                .addGap(22, 22, 22)
                .addComponent(lb_halaman)
                .addGap(4, 4, 4)
                .addGroup(panelViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btn_first)
                    .addComponent(btn_before)
                    .addComponent(cbx_data, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_next)
                    .addComponent(btn_last))
                .addGap(49, 49, 49))
        );

        panelMain.add(panelView, "card2");

        panelAdd.setBackground(new java.awt.Color(255, 255, 255));

        menuUser.setFont(new java.awt.Font("SansSerif", 1, 24)); // NOI18N
        menuUser.setForeground(new java.awt.Color(102, 102, 102));
        menuUser.setText("Tambah Menu User");

        idUser.setFont(new java.awt.Font("SansSerif", 1, 16)); // NOI18N
        idUser.setForeground(new java.awt.Color(102, 102, 102));
        idUser.setText("ID User*");

        nama.setFont(new java.awt.Font("SansSerif", 1, 16)); // NOI18N
        nama.setText("Nama");

        username.setFont(new java.awt.Font("SansSerif", 1, 16)); // NOI18N
        username.setText("Username");

        level.setFont(new java.awt.Font("SansSerif", 1, 16)); // NOI18N
        level.setText("Level");

        btnSave.setText("SIMPAN");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        batal2.setBackground(new java.awt.Color(255, 102, 0));
        batal2.setText("BATAL");
        batal2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                batal2ActionPerformed(evt);
            }
        });

        cbxLevel.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        cbxLevel.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Pilih Level", "Admin", "Kasir" }));

        password.setFont(new java.awt.Font("SansSerif", 1, 16)); // NOI18N
        password.setText("Password");

        javax.swing.GroupLayout panelAddLayout = new javax.swing.GroupLayout(panelAdd);
        panelAdd.setLayout(panelAddLayout);
        panelAddLayout.setHorizontalGroup(
            panelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAddLayout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(panelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(password)
                    .addComponent(menuUser)
                    .addComponent(idUser)
                    .addComponent(txtIdUser, javax.swing.GroupLayout.PREFERRED_SIZE, 502, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nama, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtNama, javax.swing.GroupLayout.PREFERRED_SIZE, 502, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(username)
                    .addComponent(txtUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 502, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(level)
                    .addGroup(panelAddLayout.createSequentialGroup()
                        .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(batal2, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(txtPassword, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cbxLevel, javax.swing.GroupLayout.Alignment.LEADING, 0, 500, Short.MAX_VALUE)))
                .addContainerGap(768, Short.MAX_VALUE))
        );
        panelAddLayout.setVerticalGroup(
            panelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAddLayout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addComponent(menuUser)
                .addGap(18, 18, 18)
                .addGroup(panelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(batal2, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(idUser, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(9, 9, 9)
                .addComponent(txtIdUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14)
                .addComponent(nama, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(3, 3, 3)
                .addComponent(txtNama, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24)
                .addComponent(username)
                .addGap(9, 9, 9)
                .addComponent(txtUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(password)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(level)
                .addGap(9, 9, 9)
                .addComponent(cbxLevel, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(98, Short.MAX_VALUE))
        );

        panelMain.add(panelAdd, "card2");

        add(panelMain, "card2");
    }// </editor-fold>//GEN-END:initComponents

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        showPanel();
        loadData();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        panelMain.removeAll();
        panelMain.add(panelAdd);
        panelMain.repaint();
        panelMain.revalidate();
        
        txtIdUser.setText(setidUser());
        if(btnAdd.getText().equals("UBAH")){
            dataTabel();
            btnSave.setText("PERBARUI");
        }
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        if(btnSave.getText().equals("TAMBAH"))
            {
                btnSave.setText("SIMPAN");
            }
        else if(btnSave.getText().equals("SIMPAN"))
            {
                insertData();
            }
        else if (btnSave.getText().equals("PERBARUI"))
            {
                updateData();
            }
    }//GEN-LAST:event_btnSaveActionPerformed

    private void batal2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_batal2ActionPerformed
        showPanel();
        loadData();
    }//GEN-LAST:event_batal2ActionPerformed

    private void btn_lastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_lastActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btn_lastActionPerformed

    private void tblDataMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblDataMouseClicked
        if(btnAdd.getText().equals("TAMBAH")){
            btnAdd.setText("UBAH");
            btnDelete.setVisible(true);
            btnCancel.setVisible(true);
        }
    }//GEN-LAST:event_tblDataMouseClicked

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        deleteData();
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void txtSearchKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyTyped
        searchData();
    }//GEN-LAST:event_txtSearchKeyTyped


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private rojerusan.RSMaterialButtonRectangle batal2;
    private rojerusan.RSMaterialButtonRectangle btnAdd;
    private rojerusan.RSMaterialButtonRectangle btnCancel;
    private rojerusan.RSMaterialButtonRectangle btnDelete;
    private rojerusan.RSMaterialButtonRectangle btnSave;
    private javax.swing.JButton btn_before;
    private javax.swing.JButton btn_first;
    private javax.swing.JButton btn_last;
    private javax.swing.JButton btn_next;
    private javax.swing.JComboBox<String> cbxLevel;
    private javax.swing.JComboBox<String> cbx_data;
    private javax.swing.JLabel dataUser;
    private javax.swing.JLabel idUser;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lb_halaman;
    private javax.swing.JLabel level;
    private javax.swing.JLabel menuUser;
    private javax.swing.JLabel nama;
    private javax.swing.JPanel panelAdd;
    private javax.swing.JPanel panelMain;
    private javax.swing.JPanel panelView;
    private javax.swing.JLabel password;
    private javax.swing.JTable tblData;
    private custom.JTextFieldRounded txtIdUser;
    private custom.JTextFieldRounded txtNama;
    private JPasswordField.Custom_JPasswordFieldRounded txtPassword;
    private custom.JTextFieldRounded txtSearch;
    private custom.JTextFieldRounded txtUsername;
    private javax.swing.JLabel username;
    // End of variables declaration//GEN-END:variables

    
    private void paginationUser() {
        btn_first.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e) {
                halamanSaatIni = 1;
                loadData();
            }
            
        });
        
        btn_before.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e) {
                if (halamanSaatIni > 1)
                {
                    halamanSaatIni--;
                    loadData();
                }
            }
            
        });
        
        cbx_data.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e) {
                dataPerHalaman = Integer.parseInt(cbx_data.getSelectedItem().toString());
                halamanSaatIni = 1;
                loadData();
            }
            
        });
        
        btn_next.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e) {
                if (halamanSaatIni < totalPages) {
                    halamanSaatIni++;
                    loadData();
                }
            }
            
        });
        
        btn_last.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e) {
                halamanSaatIni = totalPages;
                loadData();
            }
            
        });
        
        
    }
    
    private void calculateTotalPages(){
        int totalData = getTotalData();
        totalPages = (int) Math.ceil((double) totalData / dataPerHalaman );
    }
    
    private int getTotalData(){
        int totalData = 0;
        
        try {
            String sql = "SELECT COUNT(*) AS total FROM user";
            try (PreparedStatement st = conn.prepareStatement(sql)){
                ResultSet rs = st.executeQuery();
                if(rs.next()){
                    totalData = rs.getInt("total");
                }
            } 
        }catch (Exception e) {     
            Logger.getLogger(menuUser.class.getName()).log(Level.SEVERE,null, e);
        }
        
        return totalData;
    }
    
    private void loadData() {
        calculateTotalPages();
        int totalData = getTotalData();
        lb_halaman.setText(String.valueOf("Halaman "+ halamanSaatIni + " dari Total Data " + totalData));
        
        int startIndex = (halamanSaatIni - 1) * dataPerHalaman;
        getData(startIndex, dataPerHalaman,(DefaultTableModel) tblData.getModel());
        btnDelete.setVisible(false);
        btnCancel.setVisible(false);
    }
    
    private void resetForm() {
        txtIdUser.setText("");
        txtNama.setText("");
        txtUsername.setText("");
        cbxLevel.setSelectedItem("Pilih Level");
    }
    
    private void showPanel(){
        panelMain.removeAll();
        panelMain.add(new menuUser());
        panelMain.repaint();
        panelMain.revalidate();
    }
    
    private void setTabelModel() {
        DefaultTableModel model = (DefaultTableModel) tblData.getModel();
    }

    public void getData(int startIndex, int entriesPage, DefaultTableModel model) {
        model.setRowCount(0);
        
        try {
           String sql = "SELECT * FROM user LIMIT ?,?";
           try (PreparedStatement st = conn.prepareStatement(sql)) {
               st.setInt(1, startIndex);
               st.setInt(2, entriesPage);
               ResultSet rs = st.executeQuery();
               
               while (rs.next()) {
                    String id_user = rs.getString("id_user");
                    String nama = rs.getString("nama");
                    String username = rs.getString("username");
                    String level = rs.getString("level");


                    Object[] rowData = {id_user, nama, username, level};
                    model.addRow(rowData);
                }
           }
        }catch (Exception e) {
            Logger.getLogger(menuUser.class.getName()).log(Level.SEVERE,null, e);
        }
    }

    private String setidUser() {
    String urutan = null;
    String prefix = "US";

    try {
        // Ambil semua ID yang ada
        String sql = "SELECT CAST(SUBSTRING(id_user, 3) AS UNSIGNED) AS Nomor FROM user WHERE id_user LIKE ? ORDER BY Nomor ASC";
        try (PreparedStatement st = conn.prepareStatement(sql)) {
            st.setString(1, prefix + "%");
            ResultSet rs = st.executeQuery();

            int expectedNomor = 1; // Mulai dari 1
            while (rs.next()) {
                int currentNomor = rs.getInt("Nomor");
                if (currentNomor != expectedNomor) {
                    // Jika ada gap, gunakan expectedNomor sebagai ID baru
                    urutan = prefix + String.format("%03d", expectedNomor);
                    return urutan;
                }
                expectedNomor++;
            }

            // Jika tidak ada gap, gunakan nomor berikutnya
            urutan = prefix + String.format("%03d", expectedNomor);
        }
    } catch (Exception e) {
        Logger.getLogger(menuUser.class.getName()).log(Level.SEVERE, null, e);
    }

    return urutan;
}
    
    public boolean validasiNama(){
        boolean valid = false;
        String id_user = txtIdUser.getText();
        String nama = txtNama.getText();
        
        String sql = "SELECT nama From user WHERE id_user!='"+ id_user +
                "' AND nama LIKE BINARY '"+ nama +"'";
        try (PreparedStatement st = conn.prepareStatement(sql)){
            ResultSet rs = st.executeQuery();
            
            if(rs.next()){
                JFrame frame = (JFrame) SwingUtilities.getWindowAncestor(this);
                if (frame != null) {
                    Notification panel = new Notification(frame, Notification.Type.INFO, Notification.Location.TOP_CENTER, "SILAHKAN INPUT NAMA YANG BERBEDA");
                    panel.showNotification();
                }
            
            }else{
                valid = true;
            }
        } catch (Exception e) {
            Logger.getLogger(menuUser.class.getName()).log(Level.SEVERE,null, e);
        }
        
        return valid;
    }

    private void insertData() {
    String id_user = txtIdUser .getText();
    String nama = txtNama.getText();
    String username = txtUsername.getText();
    String password = txtPassword.getText(); // Ambil password dari field
    String level = cbxLevel.getSelectedItem().toString();
   
    // Validasi untuk memastikan semua kolom diisi
    if (id_user.isEmpty() || nama.isEmpty() || username.isEmpty() || password.isEmpty() || cbxLevel.getSelectedItem().toString().equals("Pilih Level")) {
        JFrame frame = (JFrame) SwingUtilities.getWindowAncestor(this);
        if (frame != null) {
            Notification panel = new Notification(frame, Notification.Type.WARNING, Notification.Location.TOP_CENTER, "SEMUA KOLOM HARUS DI-ISI");
            panel.showNotification();
        }
        return; // Hentikan eksekusi jika ada kolom yang kosong
    }
    
    if (!validasiNama()) {
        return; // Hentikan eksekusi jika validasi nama gagal
    }
    
    try {
        String sql = "INSERT INTO user (id_user, nama, username, password, level) VALUES (?,?,?,?,?)";
        try (PreparedStatement st = conn.prepareStatement(sql)) {
            st.setString(1, id_user);
            st.setString(2, nama);
            st.setString(3, username);
            st.setString(4, formLogin.getMd5java(password)); // Hash password
            st.setString(5, level);
            
            int rowInserted = st.executeUpdate();
            if (rowInserted > 0) {
                JFrame frame = (JFrame) SwingUtilities.getWindowAncestor(this);
                if (frame != null) {
                    Notification panel = new Notification(frame, Notification.Type.SUCCESS, Notification.Location.TOP_CENTER, "DATA BERHASIL DITAMBAHKAN");
                    panel.showNotification();
                }
                resetForm();
                loadData();
                showPanel();
            }
        }
    } catch (Exception e) {
        Logger.getLogger(menuUser .class.getName()).log(Level.SEVERE, null, e);
    }
}
    
    private void dataTabel() {
        panelView.setVisible(false);
        panelAdd.setVisible(true);
        
        int row = tblData.getSelectedRow();
        dataUser.setText("Perbarui Data User");
        
        txtIdUser.setEnabled(false);

        
        txtIdUser.setText(tblData.getValueAt(row, 0).toString());
        txtNama.setText(tblData.getValueAt(row, 1).toString());
        txtUsername.setText(tblData.getValueAt(row, 2).toString());
        cbxLevel.setSelectedItem(tblData.getValueAt(row, 3).toString());

    
    }
    
    private void updateData() {
    String id_user = txtIdUser .getText();
    String nama = txtNama.getText();
    String username = txtUsername.getText();
    String password = txtPassword.getText(); // Ambil password dari field
    String level = cbxLevel.getSelectedItem().toString();

    // Validasi untuk memastikan semua kolom diisi
    if (id_user.isEmpty() || nama.isEmpty() || username.isEmpty() || password.isEmpty() || cbxLevel.getSelectedItem().toString().equals("Pilih Level")) {
        JFrame frame = (JFrame) SwingUtilities.getWindowAncestor(this);
        if (frame != null) {
            Notification panel = new Notification(frame, Notification.Type.WARNING, Notification.Location.TOP_CENTER, "SEMUA KOLOM HARUS DI-ISI");
            panel.showNotification();
        }
        return; // Hentikan eksekusi jika ada kolom yang kosong
    }
    
    try {
        String sql = "UPDATE user SET nama=?, username=?, password=?, level=? WHERE id_user=?";
        try (PreparedStatement st = conn.prepareStatement(sql)) {
            st.setString(1, nama);
            st.setString(2, username);
            st.setString(3, formLogin.getMd5java(password)); // Hash password
            st.setString(4, level);
            st.setString(5, id_user);

            int rowUpdated = st.executeUpdate();
            if (rowUpdated > 0) {
                JFrame frame = (JFrame) SwingUtilities.getWindowAncestor(this);
                if (frame != null) {
                    Notification panel = new Notification(frame, Notification.Type.SUCCESS, Notification.Location.TOP_CENTER, "DATA BERHASIL DIPERBARUI");
                    panel.showNotification();
                }
                resetForm();
                loadData();
                showPanel();
            }
        }
    } catch (Exception e) {
        Logger.getLogger(menuUser .class.getName()).log(Level.SEVERE, null, e);
    }
}

    private void deleteData() {
    int selectedRow = tblData.getSelectedRow();

    // Validasi apakah ada baris yang dipilih
    if (selectedRow == -1) {
        JFrame frame = (JFrame) SwingUtilities.getWindowAncestor(this);
            if (frame != null) {
                Notification panel = new Notification(frame, Notification.Type.INFO, Notification.Location.TOP_CENTER, "PILIH DATA YANG INGIN DIHAPUS");
                panel.showNotification();
            }
            return;
    }

    // Konfirmasi penghapusan
    int confirm = JOptionPane.showConfirmDialog(this,
            "Apakah yakin ingin menghapus data ini?",
            "Konfirmasi Hapus Data",
            JOptionPane.YES_NO_OPTION);

    if (confirm == JOptionPane.YES_OPTION) {
        // Ambil ID dari kolom pertama (indeks 0)
        String id = tblData.getValueAt(selectedRow, 0).toString();

        try {
            String sql = "DELETE FROM user WHERE id_user=?";
            try (PreparedStatement st = conn.prepareStatement(sql)) {
                st.setString(1, id);

                int rowDeleted = st.executeUpdate();
                if (rowDeleted > 0) {
                    JFrame frame = (JFrame) SwingUtilities.getWindowAncestor(this);
                if (frame != null) {
                    Notification panel = new Notification(frame, Notification.Type.SUCCESS, Notification.Location.TOP_CENTER, "DATA BERHASIL DIHAPUS");
                    panel.showNotification();
                }
            
                    loadData(); // Refresh tabel setelah penghapusan
                } else {
                    JFrame frame = (JFrame) SwingUtilities.getWindowAncestor(this);
                if (frame != null) {
                    Notification panel = new Notification(frame, Notification.Type.WARNING, Notification.Location.TOP_CENTER, "DATA GAGAL DIHAPUS");
                    panel.showNotification();
                }
                }
            }
        } catch (Exception e) {
            Logger.getLogger(menuUser.class.getName()).log(Level.SEVERE, null, e);
        }
    }
    resetForm();
    loadData();
    showPanel();
}

    private void searchData() {
    String kataKunci = txtSearch.getText().trim(); // Menghapus spasi di awal/akhir input
    
    
    DefaultTableModel model = (DefaultTableModel) tblData.getModel();
    model.setRowCount(0);

    try {
        String sql = "SELECT * FROM user WHERE id_user LIKE ? OR nama LIKE ? OR username LIKE ? OR level LIKE ?";
        try (PreparedStatement st = conn.prepareStatement(sql)) {
            // Set parameter query untuk semua kolom
            st.setString(1, "%" + kataKunci + "%");
            st.setString(2, "%" + kataKunci + "%");
            st.setString(3, "%" + kataKunci + "%");
            st.setString(4, "%" + kataKunci + "%");

            ResultSet rs = st.executeQuery();

            while (rs.next()) {
                String idUser = rs.getString("id_user");
                String nama = rs.getString("nama");
                String username = rs.getString("username");
                String level = rs.getString("level");

                Object[] rowData = {idUser, nama, username, level};
                model.addRow(rowData);
            }
        }
    } catch (Exception e) {
        Logger.getLogger(menuUser.class.getName()).log(Level.SEVERE, null, e);
            JFrame frame = (JFrame) SwingUtilities.getWindowAncestor(this);
                if (frame != null) {
                    Notification panel = new Notification(frame, Notification.Type.WARNING, Notification.Location.TOP_CENTER, "Terjadi kesalahan saat mencari data: " + e.getMessage());
                    panel.showNotification();
                }
    }
}


    
}
