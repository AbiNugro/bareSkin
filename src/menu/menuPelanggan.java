/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package menu;

import java.sql.PreparedStatement;
import java.sql.Connection;
import config.koneksi;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.ResultSet;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import notification.Notification;

/**
 *
 * @author user
 */
public class menuPelanggan extends javax.swing.JPanel {

    /**
     * Creates new form menuBahan
     */
    private int halamanSaatIni = 1;
    private int dataPerHalaman = 20;
    private int totalPages;
    
    private final Connection conn;
    public menuPelanggan() {
        initComponents();
        
        conn = koneksi.getConnection();
        loadData();
        setTabelModel();
        paginationBahan();
        noText();
        txtIdMember.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelMain = new javax.swing.JPanel();
        panelView = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblData = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        databahan = new javax.swing.JLabel();
        txtSearch = new custom.JTextFieldRounded();
        btnDelete = new rojerusan.RSMaterialButtonRectangle();
        btnAdd = new rojerusan.RSMaterialButtonRectangle();
        btnCancel = new rojerusan.RSMaterialButtonRectangle();
        btn_first = new javax.swing.JButton();
        btn_last = new javax.swing.JButton();
        btn_before = new javax.swing.JButton();
        cbx_data = new javax.swing.JComboBox<>();
        btn_next = new javax.swing.JButton();
        lb_halaman = new javax.swing.JLabel();
        panelAdd = new javax.swing.JPanel();
        menuMember = new javax.swing.JLabel();
        idMember = new javax.swing.JLabel();
        namaMember = new javax.swing.JLabel();
        alamat = new javax.swing.JLabel();
        satuan = new javax.swing.JLabel();
        txtIdMember = new custom.JTextFieldRounded();
        txtNama = new custom.JTextFieldRounded();
        txtAlamat = new custom.JTextFieldRounded();
        btnSave = new rojerusan.RSMaterialButtonRectangle();
        batal2 = new rojerusan.RSMaterialButtonRectangle();
        txtNomor = new custom.JTextFieldRounded();

        setLayout(new java.awt.CardLayout());

        panelMain.setLayout(new java.awt.CardLayout());

        panelView.setBackground(new java.awt.Color(255, 255, 255));
        panelView.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tblData.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        tblData.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "ID Member", "Nama Member", "Alamat", "No Telepon"
            }
        ));
        tblData.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblDataMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblData);

        panelView.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(31, 160, 1240, 418));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/search.png"))); // NOI18N
        panelView.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(1030, 100, -1, -1));

        databahan.setFont(new java.awt.Font("SansSerif", 1, 24)); // NOI18N
        databahan.setForeground(new java.awt.Color(102, 102, 102));
        databahan.setText("Menu Member");
        panelView.add(databahan, new org.netbeans.lib.awtextra.AbsoluteConstraints(31, 28, -1, -1));

        txtSearch.setForeground(new java.awt.Color(102, 102, 102));
        txtSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtSearchKeyTyped(evt);
            }
        });
        panelView.add(txtSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(1070, 90, 201, -1));

        btnDelete.setBackground(new java.awt.Color(255, 0, 0));
        btnDelete.setText("HAPUS");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });
        panelView.add(btnDelete, new org.netbeans.lib.awtextra.AbsoluteConstraints(144, 78, 95, 49));

        btnAdd.setText("TAMBAH");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });
        panelView.add(btnAdd, new org.netbeans.lib.awtextra.AbsoluteConstraints(31, 78, 95, 49));

        btnCancel.setBackground(new java.awt.Color(255, 102, 0));
        btnCancel.setText("BATAL");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });
        panelView.add(btnCancel, new org.netbeans.lib.awtextra.AbsoluteConstraints(257, 78, 95, 49));

        btn_first.setText("First Page");
        panelView.add(btn_first, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 620, -1, -1));

        btn_last.setText("Last Page");
        btn_last.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_lastActionPerformed(evt);
            }
        });
        panelView.add(btn_last, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 620, -1, -1));

        btn_before.setText("<");
        panelView.add(btn_before, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 620, -1, -1));

        cbx_data.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "20", "25", "30" }));
        panelView.add(cbx_data, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 620, 68, -1));

        btn_next.setText(">");
        panelView.add(btn_next, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 620, -1, -1));

        lb_halaman.setText("Halaman Of Total Halaman");
        panelView.add(lb_halaman, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 600, -1, -1));

        panelMain.add(panelView, "card2");

        panelAdd.setBackground(new java.awt.Color(255, 255, 255));

        menuMember.setFont(new java.awt.Font("SansSerif", 1, 24)); // NOI18N
        menuMember.setForeground(new java.awt.Color(102, 102, 102));
        menuMember.setText("Tambah Menu Member");

        idMember.setFont(new java.awt.Font("SansSerif", 1, 16)); // NOI18N
        idMember.setForeground(new java.awt.Color(102, 102, 102));
        idMember.setText("ID Member*");

        namaMember.setFont(new java.awt.Font("SansSerif", 1, 16)); // NOI18N
        namaMember.setText("Nama Member");

        alamat.setFont(new java.awt.Font("SansSerif", 1, 16)); // NOI18N
        alamat.setText("Alamat");

        satuan.setFont(new java.awt.Font("SansSerif", 1, 16)); // NOI18N
        satuan.setText("No Telepon");

        btnSave.setText("SIMPAN");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        batal2.setBackground(new java.awt.Color(255, 102, 0));
        batal2.setText("BATAL");
        batal2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                batal2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelAddLayout = new javax.swing.GroupLayout(panelAdd);
        panelAdd.setLayout(panelAddLayout);
        panelAddLayout.setHorizontalGroup(
            panelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAddLayout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(panelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtNomor, javax.swing.GroupLayout.PREFERRED_SIZE, 502, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(menuMember)
                    .addComponent(idMember)
                    .addComponent(txtIdMember, javax.swing.GroupLayout.PREFERRED_SIZE, 502, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(namaMember, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtNama, javax.swing.GroupLayout.PREFERRED_SIZE, 502, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(alamat)
                    .addComponent(txtAlamat, javax.swing.GroupLayout.PREFERRED_SIZE, 502, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(satuan)
                    .addGroup(panelAddLayout.createSequentialGroup()
                        .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(batal2, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(768, Short.MAX_VALUE))
        );
        panelAddLayout.setVerticalGroup(
            panelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAddLayout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addComponent(menuMember)
                .addGap(18, 18, 18)
                .addGroup(panelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(batal2, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(idMember, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(9, 9, 9)
                .addComponent(txtIdMember, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14)
                .addComponent(namaMember, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(3, 3, 3)
                .addComponent(txtNama, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24)
                .addComponent(alamat)
                .addGap(9, 9, 9)
                .addComponent(txtAlamat, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(satuan)
                .addGap(18, 18, 18)
                .addComponent(txtNomor, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(174, Short.MAX_VALUE))
        );

        panelMain.add(panelAdd, "card2");

        add(panelMain, "card2");
    }// </editor-fold>//GEN-END:initComponents

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        showPanel();
        loadData();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        panelMain.removeAll();
        panelMain.add(panelAdd);
        panelMain.repaint();
        panelMain.revalidate();
        
        txtIdMember.setText(setidMember());
        if(btnAdd.getText().equals("UBAH")){
            dataTabel();
            btnSave.setText("PERBARUI");
        }
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        if(btnSave.getText().equals("TAMBAH"))
            {
                btnSave.setText("SIMPAN");
            }
        else if(btnSave.getText().equals("SIMPAN"))
            {
                insertData();
            }
        else if (btnSave.getText().equals("PERBARUI"))
            {
                updateData();
            }
    }//GEN-LAST:event_btnSaveActionPerformed

    private void batal2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_batal2ActionPerformed
        showPanel();
        loadData();
    }//GEN-LAST:event_batal2ActionPerformed

    private void btn_lastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_lastActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btn_lastActionPerformed

    private void tblDataMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblDataMouseClicked
        if(btnAdd.getText().equals("TAMBAH")){
            btnAdd.setText("UBAH");
            btnDelete.setVisible(true);
            btnCancel.setVisible(true);
        }
    }//GEN-LAST:event_tblDataMouseClicked

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        deleteData();
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void txtSearchKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyTyped
        searchData();
    }//GEN-LAST:event_txtSearchKeyTyped


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel alamat;
    private rojerusan.RSMaterialButtonRectangle batal2;
    private rojerusan.RSMaterialButtonRectangle btnAdd;
    private rojerusan.RSMaterialButtonRectangle btnCancel;
    private rojerusan.RSMaterialButtonRectangle btnDelete;
    private rojerusan.RSMaterialButtonRectangle btnSave;
    private javax.swing.JButton btn_before;
    private javax.swing.JButton btn_first;
    private javax.swing.JButton btn_last;
    private javax.swing.JButton btn_next;
    private javax.swing.JComboBox<String> cbx_data;
    private javax.swing.JLabel databahan;
    private javax.swing.JLabel idMember;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lb_halaman;
    private javax.swing.JLabel menuMember;
    private javax.swing.JLabel namaMember;
    private javax.swing.JPanel panelAdd;
    private javax.swing.JPanel panelMain;
    private javax.swing.JPanel panelView;
    private javax.swing.JLabel satuan;
    private javax.swing.JTable tblData;
    private custom.JTextFieldRounded txtAlamat;
    private custom.JTextFieldRounded txtIdMember;
    private custom.JTextFieldRounded txtNama;
    private custom.JTextFieldRounded txtNomor;
    private custom.JTextFieldRounded txtSearch;
    // End of variables declaration//GEN-END:variables

    private void noText() {
    txtNomor.addKeyListener(new java.awt.event.KeyAdapter() { 
        @Override
        public void keyTyped(java.awt.event.KeyEvent evt) {
            char c = evt.getKeyChar();
            // Periksa apakah karakter bukan digit atau bukan kontrol
            if (!Character.isDigit(c) && !Character.isISOControl(c)) {
                evt.consume(); // Mengabaikan karakter input
                // Mendapatkan parent JFrame dari txtNomor
                JFrame frame = (JFrame) SwingUtilities.getWindowAncestor(txtNomor);
                if (frame != null) {
                    SwingUtilities.invokeLater(() -> {
                        Notification panel = new Notification(frame, Notification.Type.WARNING, Notification.Location.TOP_CENTER, "NOMOR HARUS ANGKA");
                        panel.showNotification();
                    });
                }
            } else {
                // Periksa apakah panjang input sudah mencapai 13 digit
                if (txtNomor.getText().length() >= 13) {
                    evt.consume(); // Mengabaikan karakter input
                    // Mendapatkan parent JFrame dari txtNomor
                    JFrame frame = (JFrame) SwingUtilities.getWindowAncestor(txtNomor);
                    if (frame != null) {
                        SwingUtilities.invokeLater(() -> {
                            Notification panel = new Notification(frame, Notification.Type.WARNING, Notification.Location.TOP_CENTER, "NOMOR TIDAK BOLEH LEBIH DARI 13 DIGIT");
                            panel.showNotification();
                        });
                    }
                }
            }
        }
    });
}

    
    
    private void paginationBahan() {
        btn_first.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e) {
                halamanSaatIni = 1;
                loadData();
            }
            
        });
        
        btn_before.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e) {
                if (halamanSaatIni > 1)
                {
                    halamanSaatIni--;
                    loadData();
                }
            }
            
        });
        
        cbx_data.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e) {
                dataPerHalaman = Integer.parseInt(cbx_data.getSelectedItem().toString());
                halamanSaatIni = 1;
                loadData();
            }
            
        });
        
        btn_next.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e) {
                if (halamanSaatIni < totalPages) {
                    halamanSaatIni++;
                    loadData();
                }
            }
            
        });
        
        btn_last.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e) {
                halamanSaatIni = totalPages;
                loadData();
            }
            
        });
        
        
    }
    
    private void calculateTotalPages(){
        int totalData = getTotalData();
        totalPages = (int) Math.ceil((double) totalData / dataPerHalaman );
    }
    
    private int getTotalData(){
        int totalData = 0;
        
        try {
            String sql = "SELECT COUNT(*) AS total FROM member";
            try (PreparedStatement st = conn.prepareStatement(sql)){
                ResultSet rs = st.executeQuery();
                if(rs.next()){
                    totalData = rs.getInt("total");
                }
            } 
        }catch (Exception e) {     
            Logger.getLogger(menuPelanggan.class.getName()).log(Level.SEVERE,null, e);
        }
        
        return totalData;
    }
    
    private void loadData() {
        calculateTotalPages();
        int totalData = getTotalData();
        lb_halaman.setText(String.valueOf("Halaman "+ halamanSaatIni + " dari Total Data " + totalData));
        
        int startIndex = (halamanSaatIni - 1) * dataPerHalaman;
        getData(startIndex, dataPerHalaman,(DefaultTableModel) tblData.getModel());
        btnDelete.setVisible(false);
        btnCancel.setVisible(false);
    }
    
    private void resetForm() {
        txtIdMember.setText("");
        txtNama.setText("");
        txtAlamat.setText("");
        txtNomor.setText("");
    }
    
    private void showPanel(){
        panelMain.removeAll();
        panelMain.add(new menuPelanggan());
        panelMain.repaint();
        panelMain.revalidate();
    }
    
    private void setTabelModel() {
        DefaultTableModel model = (DefaultTableModel) tblData.getModel();
    }

    public void getData(int startIndex, int entriesPage, DefaultTableModel model) {
        model.setRowCount(0);
        
        try {
           String sql = "SELECT * FROM member LIMIT ?,?";
           try (PreparedStatement st = conn.prepareStatement(sql)) {
               st.setInt(1, startIndex);
               st.setInt(2, entriesPage);
               ResultSet rs = st.executeQuery();
               
               while (rs.next()) {
                    String idMember = rs.getString("id_member");
                    String namaMember = rs.getString("nama_member");
                    String alamat = rs.getString("alamat");
                    String noTelepon = rs.getString("no_telepon");


                    Object[] rowData = {idMember, namaMember, alamat, noTelepon};
                    model.addRow(rowData);
                }
           }
        }catch (Exception e) {
            Logger.getLogger(menuPelanggan.class.getName()).log(Level.SEVERE,null, e);
        }
    }

    private String setidMember() {
    String urutan = null;
    String prefix = "M";

    try {
        // Ambil semua ID yang ada
        String sql = "SELECT CAST(SUBSTRING(id_member, 2) AS UNSIGNED) AS Nomor FROM member WHERE id_member LIKE ? ORDER BY Nomor ASC";
        try (PreparedStatement st = conn.prepareStatement(sql)) {
            st.setString(1, prefix + "%");
            ResultSet rs = st.executeQuery();

            int expectedNomor = 1; // Mulai dari 1
            while (rs.next()) {
                int currentNomor = rs.getInt("Nomor");
                if (currentNomor != expectedNomor) {
                    // Jika ada gap, gunakan expectedNomor sebagai ID baru
                    urutan = prefix + String.format("%03d", expectedNomor);
                    return urutan;
                }
                expectedNomor++;
            }

            // Jika tidak ada gap, gunakan nomor berikutnya
            urutan = prefix + String.format("%03d", expectedNomor);
        }
    } catch (Exception e) {
        Logger.getLogger(menuPelanggan.class.getName()).log(Level.SEVERE, null, e);
    }

    return urutan;
}
    
    public boolean validasiNama(){
        boolean valid = false;
        String id_member = txtIdMember.getText();
        String nama_member = txtNama.getText();
        
        String sql = "SELECT nama_member FROM member WHERE id_member!='"+ id_member +
                "' AND nama_member LIKE BINARY '"+ nama_member +"'";
        try (PreparedStatement st = conn.prepareStatement(sql)){
            ResultSet rs = st.executeQuery();
            
            if(rs.next()){
                JFrame frame = (JFrame) SwingUtilities.getWindowAncestor(this);
                if (frame != null) {
                    Notification panel = new Notification(frame, Notification.Type.INFO, Notification.Location.TOP_CENTER, "SILAHKAN INPUT NAMA MEMBER YANG BERBEDA");
                    panel.showNotification();
                }
            
            }else{
                valid = true;
            }
        } catch (Exception e) {
            Logger.getLogger(menuPelanggan.class.getName()).log(Level.SEVERE,null, e);
        }
        
        return valid;
    }

    private void insertData() {
        String id_member = txtIdMember.getText();
        String nama_member = txtNama.getText();
        String alamat = txtAlamat.getText();
        String no_telepon = txtNomor.getText();
       
        
        if(id_member.isEmpty() || nama_member.isEmpty() || alamat.isEmpty() || no_telepon.isEmpty()){
            JFrame frame = (JFrame) SwingUtilities.getWindowAncestor(this);
            if (frame != null) {
                Notification panel = new Notification(frame, Notification.Type.WARNING, Notification.Location.TOP_CENTER, "SEMUA KOLOM HARUS DI-ISI");
                panel.showNotification();
            }
            return;
        }
        
        if(!validasiNama()){
            return;
        }
        
        try {
            String sql = "INSERT INTO member (id_member, nama_member, alamat, no_telepon) VALUES (?,?,?,?)";
            try(PreparedStatement st = conn.prepareStatement(sql)){
                st.setString(1, id_member);
                st.setString(2, nama_member);
                st.setString(3, alamat);
                st.setString(4, no_telepon);

                
                int rowInserted = st.executeUpdate();
                if(rowInserted > 0){
                    JFrame frame = (JFrame) SwingUtilities.getWindowAncestor(this);
                    if (frame != null) {
                        Notification panel = new Notification(frame, Notification.Type.SUCCESS, Notification.Location.TOP_CENTER, "DATA BERHASIL DITAMBAHKAN");
                        panel.showNotification();
                    }
            
                    resetForm();
                    loadData();
                    showPanel();
                }
            }
        } catch (Exception e) {
            Logger.getLogger(menuPelanggan.class.getName()).log(Level.SEVERE,null, e);
        }
    }
    
    private void dataTabel() {
         panelView.setVisible(false);
        panelAdd.setVisible(true);
        
        int row = tblData.getSelectedRow();
        databahan.setText("Perbarui Data Bahan");
        
        txtIdMember.setEnabled(false);

        
        txtIdMember.setText(tblData.getValueAt(row, 0).toString());
        txtNama.setText(tblData.getValueAt(row, 1).toString());
        txtAlamat.setText(tblData.getValueAt(row, 2).toString());
        txtNomor.setText(tblData.getValueAt(row, 3).toString());

    
    }
    
    private void updateData() {
        String id_member = txtIdMember.getText();
        String nama_member = txtNama.getText();
        String alamat = txtAlamat.getText();
        String no_telepon = txtNomor.getText();

        
        if(id_member.isEmpty() || nama_member.isEmpty() || alamat.isEmpty() || no_telepon.isEmpty()){
            JFrame frame = (JFrame) SwingUtilities.getWindowAncestor(this);
            if (frame != null) {
                Notification panel = new Notification(frame, Notification.Type.WARNING, Notification.Location.TOP_CENTER, "SEMUA KOLOM HARUS DI-ISI");
                panel.showNotification();
            }
            return;
        }
        
        try {
            String sql = "UPDATE member SET nama_member=?, alamat=?, no_telepon=? WHERE id_member=?";
            try(PreparedStatement st = conn.prepareStatement(sql)){
                st.setString(1, nama_member);
                st.setString(2, alamat);
                st.setString(3, no_telepon);
                st.setString(4, id_member);

                
                int rowUpdated = st.executeUpdate();
                if(rowUpdated > 0){
                    JFrame frame = (JFrame) SwingUtilities.getWindowAncestor(this);
                    if (frame != null) {
                        Notification panel = new Notification(frame, Notification.Type.SUCCESS, Notification.Location.TOP_CENTER, "DATA BERHASIL DIPERBARUI");
                        panel.showNotification();
                    }
                    resetForm();
                    loadData();
                    showPanel();
                }
            }
        } catch (Exception e) {
            Logger.getLogger(menuPelanggan.class.getName()).log(Level.SEVERE,null, e);
        }
    }

    private void deleteData() {
    int selectedRow = tblData.getSelectedRow();

    // Validasi apakah ada baris yang dipilih
    if (selectedRow == -1) {
        JFrame frame = (JFrame) SwingUtilities.getWindowAncestor(this);
        if (frame != null) {
            Notification panel = new Notification(frame, Notification.Type.WARNING, Notification.Location.TOP_CENTER, "PILIH DATA YANG INGIN DIHAPUS");
            panel.showNotification();
        }
        return;
    }

    // Konfirmasi penghapusan
    int confirm = JOptionPane.showConfirmDialog(this,
            "Apakah yakin ingin menghapus data ini?",
            "Konfirmasi Hapus Data",
            JOptionPane.YES_NO_OPTION);

    if (confirm == JOptionPane.YES_OPTION) {
        // Ambil ID dari kolom pertama (indeks 0)
        String id = tblData.getValueAt(selectedRow, 0).toString();

        try {
            String sql = "DELETE FROM member WHERE id_member=?";
            try (PreparedStatement st = conn.prepareStatement(sql)) {
                st.setString(1, id);

                int rowDeleted = st.executeUpdate();
                if (rowDeleted > 0) {
                    JFrame frame = (JFrame) SwingUtilities.getWindowAncestor(this);
                    if (frame != null) {
                        Notification panel = new Notification(frame, Notification.Type.SUCCESS, Notification.Location.TOP_CENTER, "DATA BERHASIL DIHAPUS");
                        panel.showNotification();
                    }
            
                    loadData(); // Refresh tabel setelah penghapusan
                } else {
                    JFrame frame = (JFrame) SwingUtilities.getWindowAncestor(this);
                    if (frame != null) {
                        Notification panel = new Notification(frame, Notification.Type.WARNING, Notification.Location.TOP_CENTER, "DATA GAGAL DIHAPUS");
                        panel.showNotification();
                    }
            
                }
            }
        } catch (Exception e) {
            Logger.getLogger(menuPelanggan.class.getName()).log(Level.SEVERE, null, e);
        }
    }
    resetForm();
    loadData();
    showPanel();
}

    private void searchData() {
    String kataKunci = txtSearch.getText().trim(); // Menghapus spasi di awal/akhir input
    
    
    DefaultTableModel model = (DefaultTableModel) tblData.getModel();
    model.setRowCount(0);

    try {
        String sql = "SELECT * FROM member WHERE id_member LIKE ? OR nama_member LIKE ? OR alamat LIKE ? OR no_telepon LIKE ?";
        try (PreparedStatement st = conn.prepareStatement(sql)) {
            // Set parameter query untuk semua kolom
            st.setString(1, "%" + kataKunci + "%");
            st.setString(2, "%" + kataKunci + "%");
            st.setString(3, "%" + kataKunci + "%");
            st.setString(4, "%" + kataKunci + "%");

            ResultSet rs = st.executeQuery();

            while (rs.next()) {
                String idMember = rs.getString("id_member");
                String namaMember = rs.getString("nama_member");
                String alamat = rs.getString("alamat");
                String noTelepon  = rs.getString("no_telepon");

                Object[] rowData = {idMember, namaMember, alamat, noTelepon};
                model.addRow(rowData);
            }
        }
    } catch (Exception e) {
        Logger.getLogger(menuPelanggan.class.getName()).log(Level.SEVERE, null, e);
        JFrame frame = (JFrame) SwingUtilities.getWindowAncestor(this);
        if (frame != null) {
            Notification panel = new Notification(frame, Notification.Type.WARNING, Notification.Location.TOP_CENTER, "Terjadi kesalahan saat mencari data: " + e.getMessage());
            panel.showNotification();
        }

    }
}


    
}
